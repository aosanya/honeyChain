// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var AccessControl = artifacts.require('AccessControl')

contract('AccessControl', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli

    // const ownerID = accounts[0]
    // const originBeeKeeperID1 = accounts[1]
    const harvesterId_1 = accounts[2]
    // const buyerId_1 = accounts[3]
    // const shipperId_1 = accounts[4]

    // const originBeeKeeperID2 = accounts[5]


    // //harvest 1
    // var sku1 = 1
    // var upc1 = 1
    // const originBeeKeeperName1 = "Foo Bee"
    // const originBeeKeeperInformation1 = "Alego Nyajuok"
    // const originBeeKeeperLatitude1 = "-38.239770"
    // const originBeeKeeperLongitude1 = "144.341490"
    // //

    // //harvest 2
    // var sku2 = 2
    // var upc2 = 2
    // const originBeeKeeperName2 = "Foo Bee2"
    // const originBeeKeeperInformation2 = "Alego Nyajuok2"
    // const originBeeKeeperLatitude2 = "2"
    // const originBeeKeeperLongitude2 = "-2"
    // //


    // const quantity = 10000
    // //
    // const orderId_1 = 1
    // const orderQuantity_1 = quantity / 2
    // const price_1 = 10
    // const shippingCost_1 = 1
    // const shippingDownPayment_1 = 2
    // const purchaseId_1 = 1
    // const shipmentId_1 = 1
    // const quoteId_1 = 1
    // //

    // var productID = sku1 + upc1
    // const productNotes = "Sweetest honey from natural nectar"
    // const productPrice = web3.toWei(1, "ether")
    // var itemState = 0

    // const emptyAddress = '0x00000000000000000000000000000000000000'

    // ///Available Accounts
    // ///==================
    // ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    // ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    // ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    // ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    // ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    // ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    // ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    // ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    // ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    // ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    // console.log("ganache-cli accounts used here...")
    // console.log("Contract Owner: accounts[0] ", accounts[0])
    // console.log("BeeKeeper: accounts[1] ", accounts[1])
    // console.log("Harvester: accounts[2] ", accounts[2])
    // console.log("Buyer: accounts[3] ", accounts[3])
    // console.log("Shipper: accounts[4] ", accounts[4])

    var accessControl
    before(async () => {
        accessControl = await AccessControl.deployed()
    })

    context('Roles', () => {

        it("Testing Adding New Role", async() => {
            await accessControl.addRole("Harvester")

            try{
                await accessControl.addRole("Harvester")
            }
            catch (error){
                assert.isTrue(error.toString().includes("Role Already Exists"), "Unexpected throw recieved")
                return
            }
            assert.fail('Expected throw not recieved')
        })




    })

    context('Permissions', () => {

        it("Testing Adding New Permission", async() => {
            await accessControl.addPermission("Harvester", harvesterId_1, "upc1")

            try{
               await accessControl.addPermission("Harvester" , harvesterId_1, "upc1")
            }
            catch (error){
                assert.isTrue(error.toString().includes("Permission Already Exists"), "Unexpected throw recieved")
                return
            }
            assert.fail('Expected throw not recieved')
        })

        it("Testing Adding New Permission To Non-Existing Role", async() => {
            try{
                await accessControl.addPermission("Harvester1" , harvesterId_1, "upc1")
            }
            catch (error){
                assert.isTrue(error.toString().includes("Role Does Not Exists"), "Unexpected throw recieved")
                return
            }
            assert.fail('Expected throw not recieved')
        })


    })


});

