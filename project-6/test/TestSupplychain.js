// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originBeeKeeperID = accounts[1]
    const originBeeKeeperName = "Foo Bee"
    const originBeeKeeperInformation = "Alego Nyajuok"
    const originBeeKeeperLatitude = "-38.239770"
    const originBeeKeeperLongitude = "144.341490"
    const buyerId = accounts[2]
    const quantity = 10000
    //
    const order1 = quantity / 2
    const price1 = 10
    const shippingCost1 = 1
    //

    var productID = sku + upc
    const productNotes = "Sweetest honey from natural nectar"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const harvesterID = accounts[2]
    const shipperID = accounts[3]
    const buyerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("BeeKeeper: accounts[1] ", accounts[1])
    console.log("Harvester: accounts[2] ", accounts[2])
    console.log("Shipper: accounts[3] ", accounts[3])
    console.log("Buyer: accounts[4] ", accounts[4])

    context('harvest Honey', () => {
        // 1st Test
        it("Testing smart contract function harvestItem() that allows a harvester to harvest honey", async() => {
            const supplyChain = await SupplyChain.deployed()
            // Declare and Initialize a variable for event
            var eventEmitted = false

            // Watch the emitted event Harvested()
            var event = supplyChain.Harvested({fromBlock: 0})

            await event.watch((err, res) => {
                eventEmitted = true
            })



            // Mark an item as Harvested by calling function harvestItem()
            await supplyChain.harvestItem(upc, harvesterID, originBeeKeeperID, originBeeKeeperName, originBeeKeeperInformation, originBeeKeeperLatitude, originBeeKeeperLongitude, quantity, productNotes)

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
            // Verify the result set
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
            assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
            assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferOne[3], originBeeKeeperID, 'Error: Missing or Invalid originBeekeeperID')
            assert.equal(resultBufferOne[4], originBeeKeeperName, 'Error: Missing or Invalid originBeekeeperName')
            assert.equal(resultBufferOne[5], originBeeKeeperInformation, 'Error: Missing or Invalid originFarmInformation')
            assert.equal(resultBufferOne[6], originBeeKeeperLatitude, 'Error: Missing or Invalid originFarmLatitude')
            assert.equal(resultBufferOne[7], originBeeKeeperLongitude, 'Error: Missing or Invalid originFarmLongitude')
            assert.equal(resultBufferOne[8], quantity, 'Error: Missing or Quantity')
            assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
            //assert.equal(eventEmitted, true, 'Invalid event emitted')
        })
    })

    context('place Order', () => {
        var supplyChain
        before(async () => {
            supplyChain = await SupplyChain.deployed()

            // Watch the emitted event PlacedOrder()
            var event = supplyChain.PlacedOrder()

            await event.watch((err, res) => {
                eventEmitted = true
            })

            await supplyChain.harvestItem(upc, harvesterID, originBeeKeeperID, originBeeKeeperName, originBeeKeeperInformation, originBeeKeeperLatitude, originBeeKeeperLongitude, quantity, productNotes)
        })

        it("Testing smart contract function placeOrder() that allows a buyer to buy honey", async() => {

            await supplyChain.placeOrder(buyerId, upc, order1)

            const resultOrder1 = await supplyChain.fetchOrder(1)
            assert.equal(resultOrder1[0], 1, 'Error: Invalid OrderId')
            assert.equal(resultOrder1[1], buyerId, 'Error: Invalid BuyerId')
            assert.equal(resultOrder1[2], upc, 'Error: Invalid UPC')
            assert.equal(resultOrder1[3], order1, 'Error: Invalid Quantity')
            // Mark an item as Processed by calling function processtItem()


            // Retrieve the just now saved item from blockchain by calling function fetchItem()


            // Verify the result set

        })
    })

    context('send quote', () => {
        var supplyChain

        before(async () => {
            supplyChain = await SupplyChain.deployed()

            // Watch the emitted event Harvested()
            var event = supplyChain.SentQuote({fromBlock: 0})

            await event.watch((err, res) => {
                eventEmitted = true
            })

            await supplyChain.harvestItem(upc, harvesterID, originBeeKeeperID, originBeeKeeperName, originBeeKeeperInformation, originBeeKeeperLatitude, originBeeKeeperLongitude, quantity, productNotes)
            await supplyChain.placeOrder(buyerId, upc, order1)
        })

        it("Testing smart contract function sendQuote() that allows a harvester to sendQuote", async() => {
            await supplyChain.sendQuote(1, price1, shippingCost1)

            const resultOrder1 = await supplyChain.fetchQuote(1)
            assert.equal(resultOrder1[0], 1, 'Error: Invalid QuoteId')
            assert.equal(resultOrder1[1], 1, 'Error: Invalid OrderId')
            assert.equal(resultOrder1[2], price1, 'Error: Invalid Price')
            assert.equal(resultOrder1[3], shippingCost1, 'Error: Invalid Shipping Cost')
        })
    })

    context('commit to purchase', () => {
        var supplyChain

        before(async () => {
            supplyChain = await SupplyChain.deployed()

            // Watch the emitted event Harvested()
            var event = supplyChain.Harvested({fromBlock: 0})

            await event.watch((err, res) => {
                eventEmitted = true
            })

            await supplyChain.harvestItem(upc, harvesterID, originBeeKeeperID, originBeeKeeperName, originBeeKeeperInformation, originBeeKeeperLatitude, originBeeKeeperLongitude, quantity, productNotes)
        })

        it("Testing smart contract function commitToPurchase() that allows a harvester to sendQuote", async() => {

        })
    })

    context('pick up honey', () => {
        var supplyChain

        before(async () => {
            supplyChain = await SupplyChain.deployed()

            // Watch the emitted event Harvested()
            var event = supplyChain.Harvested({fromBlock: 0})

            await event.watch((err, res) => {
                eventEmitted = true
            })

            await supplyChain.harvestItem(upc, harvesterID, originBeeKeeperID, originBeeKeeperName, originBeeKeeperInformation, originBeeKeeperLatitude, originBeeKeeperLongitude, quantity, productNotes)
        })

        it("Testing smart contract function pickUpHoney() that allows a shipper to pick up honey", async() => {

        })
    })

    context('deliver honey', () => {
        var supplyChain

        before(async () => {
            supplyChain = await SupplyChain.deployed()

            // Watch the emitted event Harvested()
            var event = supplyChain.Harvested({fromBlock: 0})

            await event.watch((err, res) => {
                eventEmitted = true
            })

            await supplyChain.harvestItem(upc, harvesterID, originBeeKeeperID, originBeeKeeperName, originBeeKeeperInformation, originBeeKeeperLatitude, originBeeKeeperLongitude, quantity, productNotes)
        })

        it("Testing smart contract function deliverHoney() that allows a shipper to deliver honey", async() => {

        })
    })

    context('release payment', () => {
        var supplyChain

        before(async () => {
            supplyChain = await SupplyChain.deployed()

            // Watch the emitted event Harvested()
            var event = supplyChain.Harvested({fromBlock: 0})

            await event.watch((err, res) => {
                eventEmitted = true
            })

            await supplyChain.harvestItem(upc, harvesterID, originBeeKeeperID, originBeeKeeperName, originBeeKeeperInformation, originBeeKeeperLatitude, originBeeKeeperLongitude, quantity, productNotes)
        })

        it("Testing smart contract function releasePayment() that allows a buyer to release payment", async() => {

        })
    })

});

